# default.custom.yaml
# save it to:
#   ~/.config/ibus/rime  (linux)
#   ~/Library/Rime       (macos)
#   %APPDATA%\Rime       (windows)



patch:
  # 菜单中可选的方案列表，可根据喜好自行调整顺序，第一位为默认方案
  schema_list:
    - schema: wubi_moye
    - schema: rime_ice
    - schema: double_pinyin_flypy # 小鹤双拼
    - schema: double_pinyin_mspy

  # Menu
  menu:
    page_size: 5                    # 候选词数量，最多支持 10 个

  key_binder:
    # Lua 配置: 以词定字（上屏当前词句的第一个或最后一个字）
    select_first_character: "minus"
    select_last_character: "equal"

    bindings:
      - { when: has_menu, accept: semicolon, send: 2 }  # 候选2 用分号
      - { when: has_menu, accept: apostrophe, send: 3 } # 候选3 用单引号

      # 上下翻页 [ ]
      - { when: has_menu, accept: bracketleft, send: Page_Up }
      - { when: has_menu, accept: bracketright, send: Page_Down }

      # Option/Alt + ←/→ 切换光标至下/上一个拼音
      - { when: composing, accept: Alt+Left, send: Shift+Left }
      - { when: composing, accept: Alt+Right, send: Shift+Right }

      # 翻页 - =
      # - { when: has_menu, accept: minus, send: Page_Up }
      # - { when: has_menu, accept: equal, send: Page_Down }

      # 翻页 , .
      # - { when: paging, accept: comma, send: Page_Up }
      # - { when: has_menu, accept: period, send: Page_Down }

      # 空格清屏
      - { when: composing, accept: space, send: Escape }
      - { when: has_menu, accept: space, send: space }

      # emacs key bindings, copy from https://github.com/rime/rime-prelude/blob/master/key_bindings.yaml
      - { when: composing, accept: Control+p, send: Up }
      - { when: composing, accept: Control+n, send: Down }
      - { when: composing, accept: Control+b, send: Left }
      - { when: composing, accept: Control+f, send: Right }
      - { when: composing, accept: Control+a, send: Home }
      - { when: composing, accept: Control+e, send: End }
      - { when: composing, accept: Control+d, send: Delete }
      - { when: composing, accept: Control+k, send: Shift+Delete }
      - { when: composing, accept: Control+h, send: BackSpace }
      - { when: composing, accept: Control+g, send: Escape }
      - { when: composing, accept: Control+bracketleft, send: Escape }
      - { when: composing, accept: Alt+v, send: Page_Up }
      - { when: composing, accept: Control+v, send: Page_Down }
  # __patch:
  #     key_binder/+:
  #       select_first_character: "bracketleft" # 即 [
  #       select_last_character: "bracketright" # 即 ]
